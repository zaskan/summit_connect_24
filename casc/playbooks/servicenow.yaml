---
    - name: Include vars
      ansible.builtin.include_vars:
        file: vars/servicenow/users.yaml

    - name: Check if Ansible EDA user already exists
      servicenow.itsm.api_info:
        instance:
          host: "{{ sn_host }}"
          username: "{{ sn_username }}"
          password: "{{ sn_password }}"
        resource: sys_user
        sysparm_query: "user_name={{ users[0].username }}"
        columns:
          - sys_id
      register: snow_eda_user_info

    - name: Create Ansible EDA user if doesn't exists
      servicenow.itsm.api:
        instance:
          host: "{{ sn_host }}"
          username: "{{ sn_username }}"
          password: "{{ sn_password }}"
        resource: sys_user
        action: post
        data:
          first_name: "{{ users[0].username }}"                                   
          last_name: "{{ users[0].username }}"                                      
          name: "{{ users[0].username }}"                                             
          user_name: "{{ users[0].username }}"                           
          user_password: "{{ users[0].password }}"                      
          title: "{{ users[0].username }}"                                   
        query_params:
          sysparm_input_display_value: true
      register: new_snow_eda_user_info
      when: snow_eda_user_info.record | length == 0

    - name: Retrieve Ansible EDA user sys_id
      ansible.builtin.set_fact:
        snow_eda_user_sys_id: "{{ item | json_query(query) }}"
      vars:
        query: "record[0].sys_id || record.sys_id"
      loop:
        - "{{ snow_eda_user_info }}"
        - "{{ new_snow_eda_user_info }}"
      when: item.record is defined

    - name: Get Admin role information
      servicenow.itsm.api_info:
        instance:
          host: "{{ sn_host }}"
          username: "{{ sn_username }}"
          password: "{{ sn_password }}"
        resource: sys_user_role
        sysparm_query: "name={{ users[0].role }}"
        columns:
          - sys_id
      register: snow_admin_role_info

    - name: Retrieve Admin role sys_id
      ansible.builtin.set_fact:
        snow_admin_role_sys_id: "{{ snow_admin_role_info | json_query(query) }}"
      vars:
        query: "record[0].sys_id || record.sys_id"
      when: snow_admin_role_info.record is defined

    - name: Check if Ansible EDA user and Admin role are already linked
      servicenow.itsm.api_info:
        instance:
          host: "{{ sn_host }}"
          username: "{{ sn_username }}"
          password: "{{ sn_password }}"
        resource: sys_user_has_role
        sysparm_query: "user={{ snow_eda_user_sys_id }}^role={{ snow_admin_role_sys_id }}"
        columns:
          - sys_id
      register: snow_eda_user_role_link_info

    - name: Link Ansible EDA user and Admin role
      servicenow.itsm.api:
        instance:
          host: "{{ sn_host }}"
          username: "{{ sn_username }}"
          password: "{{ sn_password }}"
        resource: sys_user_has_role
        action: post
        data:
          user: "{{ snow_eda_user_sys_id }}"
          role: "{{ snow_admin_role_sys_id }}"
      register: new_user_role_link_sys_id
      when: snow_eda_user_role_link_info.record | length== 0
