---
- name: Reset Demo
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Get list of jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/jobs"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD')  }}"
        method: GET
        validate_certs: false
        force_basic_auth: true
      register: jobs

    - name: Delete Jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/jobs/{{ item.id }}/"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        method: DELETE
        validate_certs: false
        force_basic_auth: true
        status_code: 204
      loop: "{{ jobs.json.results }}"

    - name: Get list of jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/workflow_jobs"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        method: GET
        validate_certs: false
        force_basic_auth: true
      register: jobs

    - name: Delete Workflow Jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/workflow_jobs/{{ item.id }}/"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        method: DELETE
        validate_certs: false
        force_basic_auth: true
        status_code: 204
      loop: "{{ jobs.json.results }}"

    - name: Get list of command jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/ad_hoc_commands/"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        method: GET
        validate_certs: false
        force_basic_auth: true
      register: jobs

    - name: Delete command jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/ad_hoc_commands/{{ item.id }}/"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        method: DELETE
        validate_certs: false
        force_basic_auth: true
        status_code: 204
      loop: "{{ jobs.json.results }}"

    - name: Get list of project update jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/project_updates/"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        method: GET
        validate_certs: false
        force_basic_auth: true
      register: jobs

    - name: Delete project update jobs
      ansible.builtin.uri:
        url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/project_updates/{{ item.id }}/"
        user: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        method: DELETE
        validate_certs: false
        force_basic_auth: true
        status_code: 204
      loop: "{{ jobs.json.results }}"

    - name: Delete Rulebook Activation
      ansible.eda.rulebook_activation:
        controller_host: "{{ lookup('ansible.builtin.env', 'EDA_HOST')  }}"
        controller_username: "{{ lookup('ansible.builtin.env', 'EDA_USERNAME') }}"
        controller_password: "{{ lookup('ansible.builtin.env', 'EDA_PASSWORD') }}"
        validate_certs: false
        name: "Kafka Rulebook Activation"
        state: absent

    - name: Wait for rulebook activation to be deleted
      ansible.eda.rulebook_activation_info:
        controller_host: "{{ lookup('ansible.builtin.env', 'EDA_HOST')  }}"
        controller_username: "{{ lookup('ansible.builtin.env', 'EDA_USERNAME') }}"
        controller_password: "{{ lookup('ansible.builtin.env', 'EDA_PASSWORD') }}"
        name: "Kafka Rulebook Activation"
        validate_certs: false
      register: activation_status
      until: activation_status.activations[0] is not defined

    - name: Create Rulebook Activation
      ansible.eda.rulebook_activation:
        controller_host: "{{ lookup('ansible.builtin.env', 'EDA_HOST')  }}"
        controller_username: "{{ lookup('ansible.builtin.env', 'EDA_USERNAME') }}"
        controller_password: "{{ lookup('ansible.builtin.env', 'EDA_PASSWORD') }}"
        validate_certs: false
        name: "Kafka Rulebook Activation"
        description: "Kafka Rulebook Activation"
        project_name: "OpenTelemetry EDA Project"
        rulebook_name: kafka_ssl.yaml
        decision_environment_name: EDA Decision Environment
        enabled: true
        awx_token_name: "Ansible Controller"
        state: present

    - name: Wait for rulebook activation to be running
      ansible.eda.rulebook_activation_info:
        controller_host: "{{ lookup('ansible.builtin.env', 'EDA_HOST')  }}"
        controller_username: "{{ lookup('ansible.builtin.env', 'EDA_USERNAME') }}"
        controller_password: "{{ lookup('ansible.builtin.env', 'EDA_PASSWORD') }}"
        name: "Kafka Rulebook Activation"
        validate_certs: false
      register: activation_status
      until: activation_status.activations[0] is defined and activation_status.activations[0].status == "running"

    - name: Retrieve all incidents
      servicenow.itsm.api_info:
        instance:
          host: "{{ lookup('ansible.builtin.env', 'SN_HOST') }}"
          username: "{{ lookup('ansible.builtin.env', 'SN_USERNAME') }}"
          password: "{{ lookup('ansible.builtin.env', 'SN_PASSWORD') }}"
        resource: incident
      register: incidents

    - servicenow.itsm.incident:
        instance:
          host: "{{ lookup('ansible.builtin.env', 'SN_HOST') }}"
          username: "{{ lookup('ansible.builtin.env', 'SN_USERNAME') }}"
          password: "{{ lookup('ansible.builtin.env', 'SN_PASSWORD') }}"
        state: absent
        number: "{{ item.number }}"
      loop: "{{ incidents.record }}"
